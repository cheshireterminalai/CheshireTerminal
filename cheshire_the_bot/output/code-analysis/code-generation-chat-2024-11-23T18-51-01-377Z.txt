Input:
Write a Python function that implements binary search algorithm. Include comments explaining the code.

Output:
Here is a Python implementation of a binary search algorithm:

```python
def binary_search(arr, low, high, x):
    # Check base case
    if high >= low:
        mid = (high + low) // 2

        # If element is present at the middle itself
        if arr[mid] == x:
            return mid

        # If element is smaller than mid, then it can only
        # be present in left subarray
        elif arr[mid] > x:
            return binary_search(arr, low, mid - 1, x)

        # Else the element can only be present in right subarray
        else:
            return binary_search(arr, mid + 1, high, x)

    else:
        # Element is not present in the array
        return -1

# Test array
arr = [2, 3, 4, 10, 40]
x = 10

# Function call
result = binary_search(arr, 0, len(arr)-1, x)

if result != -1:
    print("Element is present at index", str(result))
else:
    print("Element is not present in array")
```

Explanation:

1. The `binary_search` function takes four arguments: `arr` (the array to search), `low` and `high` (the indices of the subarray we're currently searching), and `x` (the value we're searching for).

2. We first check the base case - if `high` is greater than or equal to `low`, we continue. If not, the value we're searching for is not in the array.

3. We then calculate the middle index of the subarray.

4. We compare the value at the middle index with `x`. If they're equal, we've found the value and return the middle index.

5. If the value at the middle index is greater than `x`, we know that `x` can only be present in the left subarray. So, we call `binary_search` again, but this time we set `high` to `mid - 1`.

6. If the value at the middle index is less than `x`, we know that `x` can only be present in the right subarray. So, we call `binary_search` again, but this time we set `low` to `mid + 1`.

7. If the value is not found in the array, `binary_search` returns `-1`.